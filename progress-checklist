
✅ Incident Tracker - Ops Progress Checklist
🛠️ Core Functionalities
 Flask app with SQLite backend

 Pagination, search, and sorting

 Create, edit, delete incidents

 Log file setup with rotation

 Home and create incident buttons in UI

🗂️ Log Management
 Custom log file: /var/log/incident-tracker/incident_tracker.log

 Logrotate configuration (/etc/logrotate.d/incident_tracker)

 Weekly rotation, compression, and retention

🛡️ Backup & Recovery
 Daily cron job to dump DB into /home/ubuntu/backups

 Verified dump file with timestamp format

 Log and backup directories created with proper permissions

🔧 Linux Admin Practice
 Installed and configured tmux for persistent sessions

 Created cron jobs for scheduled tasks

 Practiced logrotate syntax and customization

 Used systemctl to manage Flask app as a service

🔍 Monitoring (Planned / In Progress)
 Use Icinga or Nagios to monitor Flask service uptime

 Set up alerts for high disk usage or error logs

 Monitor system resource metrics (CPU, memory)

🔐 Security Hardening (Planned)
 Configure UFW firewall (allow only SSH + web)

 Harden SSH access (disable password login)

 Set file/folder permissions for logs and backups

 Set up HTTPS with Let's Encrypt (via NGINX)

☁️ AWS / Cloud Ops (Planned)
 Mount EBS volume for /var/log or /home/ubuntu/backups

 Sync backups to S3 using awscli

 Set up CloudWatch logs or custom metrics

🚀 CI/CD Automation (Planned)
 GitHub Actions to deploy on main push

 Auto restart systemd service after deployment

 Rollback plan or backup on deployment


🧪 Fault Testing & Resilience (Planned)
 Simulate app or DB crash

 Observe and log error behavior

 Restore from backup and verify recovery
